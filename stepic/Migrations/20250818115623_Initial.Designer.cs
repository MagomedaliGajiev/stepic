// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace stepic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250818115623_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("stepic.Models.Certificate", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("Grade")
                        .HasColumnType("int")
                        .HasColumnName("grade");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issue_date");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("certificates", (string)null);
                });

            modelBuilder.Entity("stepic.Models.CertificateSetting", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("ExcellentThreshold")
                        .HasColumnType("int")
                        .HasColumnName("excellent_threshold");

                    b.Property<bool>("IsCertificateAutoIssued")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_certificate_auto_issued");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("logo_url");

                    b.Property<int>("RegularThreshold")
                        .HasColumnType("int")
                        .HasColumnName("regular_threshold");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("signature_url");

                    b.HasKey("CourseId");

                    b.ToTable("certificate_settings", (string)null);
                });

            modelBuilder.Entity("stepic.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbuseCount")
                        .HasColumnType("int")
                        .HasColumnName("abuse_count");

                    b.Property<int>("EpicCount")
                        .HasColumnType("int")
                        .HasColumnName("epic_count");

                    b.Property<int?>("ReplyCommentId")
                        .HasColumnType("int")
                        .HasColumnName("reply_comment_id");

                    b.Property<int?>("ReplyCommentId1")
                        .HasColumnType("int");

                    b.Property<int?>("StepId")
                        .HasColumnType("int")
                        .HasColumnName("step_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ReplyCommentId");

                    b.HasIndex("ReplyCommentId1");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("stepic.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<string>("Photo")
                        .HasColumnType("longtext")
                        .HasColumnName("photo");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("stepic.Models.CourseAuthor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("courses_authors", (string)null);
                });

            modelBuilder.Entity("stepic.Models.CourseReview", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("AbuseCount")
                        .HasColumnType("int")
                        .HasColumnName("abuse_count");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_date");

                    b.Property<int>("EpicCount")
                        .HasColumnType("int")
                        .HasColumnName("epic_count");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<string>("Text")
                        .HasColumnType("longtext")
                        .HasColumnName("text");

                    b.HasKey("CourseId", "UserId");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("course_reviews", (string)null);
                });

            modelBuilder.Entity("stepic.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbuseCount")
                        .HasColumnType("int")
                        .HasColumnName("abuse_count");

                    b.Property<int>("EpicCount")
                        .HasColumnType("int")
                        .HasColumnName("epic_count");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_lessons");

                    b.ToTable("lessons", (string)null);
                });

            modelBuilder.Entity("stepic.Models.Progress", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("StepId")
                        .HasColumnType("int")
                        .HasColumnName("step_id");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_passed");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("UserId", "StepId");

                    b.HasIndex("StepId");

                    b.ToTable("progresses", (string)null);
                });

            modelBuilder.Entity("stepic.Models.SocialProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("social_providers", (string)null);
                });

            modelBuilder.Entity("stepic.Models.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasColumnName("cost");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("steps", (string)null);
                });

            modelBuilder.Entity("stepic.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("Title")
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("stepic.Models.UnitLesson", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("lesson_id");

                    b.HasKey("UnitId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("unit_lessons", (string)null);
                });

            modelBuilder.Entity("stepic.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar");

                    b.Property<int>("DaysWithoutBreak")
                        .HasColumnType("int")
                        .HasColumnName("days_without_break");

                    b.Property<int>("DaysWithoutBreakMax")
                        .HasColumnType("int")
                        .HasColumnName("days_without_break_max");

                    b.Property<string>("Details")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("details");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("int")
                        .HasColumnName("followers_count");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("join_date");

                    b.Property<int>("Knowledge")
                        .HasColumnType("int")
                        .HasColumnName("knowledge");

                    b.Property<int>("Reputation")
                        .HasColumnType("int")
                        .HasColumnName("reputation");

                    b.Property<int>("SolvedTasks")
                        .HasColumnType("int")
                        .HasColumnName("solved_tasks");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("stepic.Models.UserCourse", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_favorite");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_pinned");

                    b.Property<DateTime>("LastViewed")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_viewed");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("user_courses", (string)null);
                });

            modelBuilder.Entity("stepic.Models.UserSocialProvider", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("SocialProviderId")
                        .HasColumnType("int")
                        .HasColumnName("social_provider_id");

                    b.Property<string>("ConnectUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("connect_url");

                    b.HasKey("UserId", "SocialProviderId");

                    b.HasIndex("SocialProviderId");

                    b.ToTable("user_social_providers", (string)null);
                });

            modelBuilder.Entity("stepic.Models.Certificate", b =>
                {
                    b.HasOne("stepic.Models.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stepic.Models.User", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stepic.Models.CertificateSetting", b =>
                {
                    b.HasOne("stepic.Models.Course", "Course")
                        .WithOne("CertificateSetting")
                        .HasForeignKey("stepic.Models.CertificateSetting", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("stepic.Models.Comment", b =>
                {
                    b.HasOne("stepic.Models.Step", "Step")
                        .WithMany("Comments")
                        .HasForeignKey("ReplyCommentId");

                    b.HasOne("stepic.Models.Comment", "ReplyComment")
                        .WithMany("ReplyComments")
                        .HasForeignKey("ReplyCommentId1");

                    b.HasOne("stepic.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplyComment");

                    b.Navigation("Step");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stepic.Models.CourseAuthor", b =>
                {
                    b.HasOne("stepic.Models.Course", "Course")
                        .WithMany("CourseAuthors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stepic.Models.User", "User")
                        .WithMany("CourseAuthors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stepic.Models.CourseReview", b =>
                {
                    b.HasOne("stepic.Models.Comment", "Comment")
                        .WithOne("CourseReview")
                        .HasForeignKey("stepic.Models.CourseReview", "CommentId");

                    b.HasOne("stepic.Models.Course", "Course")
                        .WithMany("CourseReviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stepic.Models.User", "User")
                        .WithMany("CourseReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stepic.Models.Progress", b =>
                {
                    b.HasOne("stepic.Models.Step", "Step")
                        .WithMany("Progresses")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stepic.Models.User", "User")
                        .WithMany("Progresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stepic.Models.Step", b =>
                {
                    b.HasOne("stepic.Models.Lesson", "Lesson")
                        .WithMany("Steps")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("stepic.Models.Unit", b =>
                {
                    b.HasOne("stepic.Models.Course", "Course")
                        .WithMany("Units")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("stepic.Models.UnitLesson", b =>
                {
                    b.HasOne("stepic.Models.Lesson", "Lesson")
                        .WithMany("UnitLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stepic.Models.Unit", "Unit")
                        .WithMany("UnitLessons")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("stepic.Models.UserCourse", b =>
                {
                    b.HasOne("stepic.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stepic.Models.User", "User")
                        .WithMany("UserCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stepic.Models.UserSocialProvider", b =>
                {
                    b.HasOne("stepic.Models.SocialProvider", "SocialProvider")
                        .WithMany("UserSocialProviders")
                        .HasForeignKey("SocialProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("stepic.Models.User", "User")
                        .WithMany("UserSocialProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("stepic.Models.Comment", b =>
                {
                    b.Navigation("CourseReview")
                        .IsRequired();

                    b.Navigation("ReplyComments");
                });

            modelBuilder.Entity("stepic.Models.Course", b =>
                {
                    b.Navigation("CertificateSetting")
                        .IsRequired();

                    b.Navigation("Certificates");

                    b.Navigation("CourseAuthors");

                    b.Navigation("CourseReviews");

                    b.Navigation("Units");

                    b.Navigation("UserCourses");
                });

            modelBuilder.Entity("stepic.Models.Lesson", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("UnitLessons");
                });

            modelBuilder.Entity("stepic.Models.SocialProvider", b =>
                {
                    b.Navigation("UserSocialProviders");
                });

            modelBuilder.Entity("stepic.Models.Step", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Progresses");
                });

            modelBuilder.Entity("stepic.Models.Unit", b =>
                {
                    b.Navigation("UnitLessons");
                });

            modelBuilder.Entity("stepic.Models.User", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Comments");

                    b.Navigation("CourseAuthors");

                    b.Navigation("CourseReviews");

                    b.Navigation("Progresses");

                    b.Navigation("UserCourses");

                    b.Navigation("UserSocialProviders");
                });
#pragma warning restore 612, 618
        }
    }
}
